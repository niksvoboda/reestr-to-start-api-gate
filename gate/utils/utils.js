
const dbFile        = require("../components/db_File.js");
/**
 * 
 * @param {*} startProject 
 * @returns 
 * –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±—ç–∫–∞–ø—Ñ–∞–π–ª
 */
const getImportData = (startProject) => {
    try {
       const data = startProject?.data[0];
       const customInformation = data.customInformation ? data.customInformation : {
          fields: []
       }
       const specificationsIds = data.specificationsIds ? data.specificationsIds : []
 
       const saveData = {
          id: data.id,
          name: data.name,
          specificationsIds: specificationsIds,
          specificationsIdsSync: true,
          customInformation: customInformation.fields.map(p => p = {
             ...p,
             sync: true
          })
       }
       return saveData
    } catch (error) {
       console.log(error)
       return {
          error: 'getImportData'
       }
    }
 }
 const getSpecificationsIdsFromStart = (reestrProject, dropDownFields)=>{
   try {
      //console.log(reestrProject, dropDownFields)
      let specificationsIds = []
      for (const dropDownField of dropDownFields) {
         const idsNames = dropDownField?.idsNames? dropDownField?.idsNames : []
         const textValueFromReestr = reestrProject[dropDownField.nameReestr]? reestrProject[dropDownField.nameReestr] : ''
         for (const idsName of idsNames) {
            const searchTextValueInReestr = idsName?.reestr? idsName?.reestr : ''
            // –ò—â–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤ –±–∞–∑–æ–≤–æ–º —à–∞–±–ª–æ–Ω–µ –≤ –º–∞–ø–ø–∏–Ω–≥–µ –≤—ã–ø–∞–¥–∞—é—â–∏—Ö –ø–æ–ª–µ–π —Ç–µ–∫—Å—Ç–æ–≤–æ–µ  –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–µ—Å—Ç—Ä–∞
            // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ ID –≤ –∏—Ç–æ–≥–æ–≤—ã–π –º–∞—Å—Å–∏–≤ specificationsIds
            if(textValueFromReestr.includes(searchTextValueInReestr)){
               specificationsIds.push(idsName?.id)
            }
         }
      }
      return specificationsIds;
   } catch (error) {
      console.log(error)
      return [];
   }
 }
 const getOwners = (reestrProject, owners, personal_2012) => {
   try {
      let result = []
      //console.log(reestrProject, owners, personal_2012)
      // –ü–æ–ª—É—á–∞–µ–º ID –≤—Å–µ—Ö –æ–≤–Ω–µ—Ä–æ–≤ –ø–æ uniq_id –ø—Ä–æ–µ–∫—Ç–∞
      const ownersIDs = owners.filter(p=>p.reestr_as_id == reestrProject.uniq_id)
      for (const ownersID of ownersIDs) {
         // –î–ª—è –∫–∞–∂–¥–æ–≥–æ ID –æ–≤–Ω–µ—Ä–∞ –ø–æ–ª—É—á–∞–µ–º –§–ò–û –∏–∑ —Ç–∞–±–ª–∏—Ü—ã personal_2012
         const personal_2012_fio = personal_2012.filter(p=>p.rowid == ownersID.boss_id)[0]
        // console.log(personal_2012_fio)
         result.push(personal_2012_fio.fio)
      }
      //console.log(result)
      result = [...new Set(result)]
      result = result.join(',')
      return result
   } catch (error) {
      console.log(error)
      return {
         error: 'getOwners'
      }
   }
}
const getManagers = (reestrProject, managers, personal_2012) => {
   try {
      let result = []
      // console.log(reestrProject, managers, personal_2012)
      // –ü–æ–ª—É—á–∞–µ–º ID –≤—Å–µ—Ö –æ–≤–Ω–µ—Ä–æ–≤ –ø–æ uniq_id –ø—Ä–æ–µ–∫—Ç–∞
      const managersIDs = managers.filter(p=>p.id_reestr_abs == reestrProject.uniq_id)
      //console.log(managersIDs)
      for (const managerID of managersIDs) {
         // –î–ª—è –∫–∞–∂–¥–æ–≥–æ ID –æ–≤–Ω–µ—Ä–∞ –ø–æ–ª—É—á–∞–µ–º –§–ò–û –∏–∑ —Ç–∞–±–ª–∏—Ü—ã personal_2012
         const personal_2012_fio = personal_2012.filter(p=>p.rowid == managerID.id_PERSONAL_2012)[0]
        // console.log(personal_2012_fio)
         result.push(personal_2012_fio.fio)
      }
      //console.log(result)
      result = [...new Set(result)]
      result = result.join(',')
      return result
   } catch (error) {
      console.log(error)
      return {
         error: 'getManagers'
      }
   }
}

/** –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ—Ç–≤–µ—Å—Ç–≤–∏—è –º–∞—Å—Å–∏–≤–æ–≤  specificationsIds üòâ */ 
function arraysAreEqual(array1, array2) {
   // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤—É—é –ª–∏ –¥–ª–∏–Ω—É –∏–º–µ—é—Ç –º–∞—Å—Å–∏–≤—ã
   if (array1.length !== array2.length) {
     return false;
   }  
   // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–æ–≤
   for (let i = 0; i < array1.length; i++) {
     for (let j = 0; j < array2.length; j++) {

        const search_element = array1.filter(p=>p==array2[j])
       // console.log('search_element', search_element)
        if (search_element.length < 1) {
           return false; // –ï—Å–ª–∏ —Ç–∞–∫–æ–π —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω 
         }
     }    
   }    
   // –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –º–∞—Å—Å–∏–≤—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã
   return true;
 }
  /** –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ specificationsIds, —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –±—ç–∫–∞–ø, –ø–æ–ª—è –≤ —Å—Ç–∞—Ä—Ç–µ –∏ —Ä–µ–µ—Å—Ç—Ä–µ */
  function compareIds(backupIds, currentIds, specificationsIdsFromStart){
      let resultIdsArr = []
      let syncIdsFlag = true
      const compareBackupAndStart = arraysAreEqual(backupIds, currentIds)
      const compareBackupAndReestr = arraysAreEqual(backupIds, specificationsIdsFromStart)
      if (compareBackupAndStart == true && compareBackupAndReestr == true) {
         resultIdsArr = backupIds
      } else if(compareBackupAndStart == true  && compareBackupAndReestr == false) {
         resultIdsArr = specificationsIdsFromStart
         syncIdsFlag = false
      } else if(compareBackupAndStart == false && compareBackupAndReestr == true) {
         resultIdsArr = currentIds
         syncIdsFlag = false
      } else if(compareBackupAndStart == false && compareBackupAndReestr == false) {
         resultIdsArr = currentIds
         syncIdsFlag = false
      }
      return { resultIdsArr, syncIdsFlag };
  }
 /** –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ customInformation, —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –±—ç–∫–∞–ø, –ø–æ–ª—è –≤ —Å—Ç–∞—Ä—Ç–µ –∏ —Ä–µ–µ—Å—Ç—Ä–µ */
 function compareCustomFields(backupCustomFields, currentCustomFields, reestrCustomFields){
   const arr1 = backupCustomFields
   const arr2 = currentCustomFields
   const arr3 = reestrCustomFields

   // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –º–∞–ø–ø–∏–Ω–≥–∞ –ø—É—Ç–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –±—ç–∫–∞–ø–∞ –∏ –∑–∞–ø–∏—Å–µ–π –≤ —Å—Ç–∞—Ä—Ç–µ
   const updateSyncStatus = (arr1, arr2) => {
      // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –ø–µ—Ä–≤–æ–≥–æ –º–∞—Å—Å–∏–≤–∞, —á—Ç–æ–±—ã –Ω–µ –º—É—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π
      const updatedArr1 = JSON.parse(JSON.stringify(arr1));    
      // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –≤—Ç–æ—Ä–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
      arr2.forEach((item2) => {
        // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤ –ø–µ—Ä–≤–æ–º –º–∞—Å—Å–∏–≤–µ –ø–æ fieldName
        const item1 = updatedArr1.find(item => item.fieldName === item2.fieldName);            
        // –ï—Å–ª–∏ –Ω–∞—à–µ–ª—Å—è —ç–ª–µ–º–µ–Ω—Ç –∏ –ø–æ–ª–µ value —Ä–∞–∑–ª–∏—á–∞–µ—Ç—Å—è, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º sync –≤ false
        if (item1 && item1.value !== item2.value) {
          item1.sync = false;
        }
      });    
      return updatedArr1;
    };   
    
    function syncAndUpdate(arr1, arr2, arr3) {
      // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏–∏ –ø–µ—Ä–≤–æ–≥–æ –∏ –≤—Ç–æ—Ä–æ–≥–æ –º–∞—Å—Å–∏–≤–∞, —á—Ç–æ–±—ã –Ω–µ –∏–∑–º–µ–Ω—è—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      const updatedArr1 = JSON.parse(JSON.stringify(arr1));
      const updatedArr2 = JSON.parse(JSON.stringify(arr2));
    
      // –ò—Ç–µ—Ä–∞—Ü–∏—è –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º —Ç—Ä–µ—Ç—å–µ–≥–æ –º–∞—Å—Å–∏–≤–∞
      arr3.forEach((item3) => {
        // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –ø–µ—Ä–≤–æ–º –∏ –≤—Ç–æ—Ä–æ–º –º–∞—Å—Å–∏–≤–µ
        const item1 = updatedArr1.find(item => item.fieldName === item3.fieldName);
        const item2 = updatedArr2.find(item => item.fieldName === item3.fieldName);
    
       // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã –∏ –∑–Ω–∞—á–µ–Ω–∏–µ value –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –≤–æ –≤—Ç–æ—Ä–æ–º –∏ —Ç—Ä–µ—Ç—å–µ–º –º–∞—Å—Å–∏–≤–∞—Ö, –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Ö
       // –µ—Å–ª–∏ –º–∞–ø–ø–∏–Ω–≥ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –†–µ–µ—Å—Ç—Ä–µ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Å—Ç–∞—Ä—Ç–∞, –∞ –≤ —Å—Ç–∞—Ä—Ç–µ –Ω–µ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –±—ç–∫–∞–ø–∞(—ç—Ç–æ –º—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Ñ–ª–∞–≥–æ–º sync –æ—Å—Ç–∞–≤–∏–≤ –µ–≥–æ –≤ true –Ω–∞ –ø—Ä–æ—à–ª–æ–º —à–∞–≥–µ)
        if (item1 && item2 && item2.value !== item3.value && item1.sync == true) {
          item1.sync = false;  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º sync –∫–∞–∫ false –≤ –ø–µ—Ä–≤–æ–º –º–∞—Å—Å–∏–≤–µ
          item2.value = item3.value;  // –û–±–Ω–æ–≤–ª—è–µ–º value –≤–æ –≤—Ç–æ—Ä–æ–º –º–∞—Å—Å–∏–≤–µ
        }
      });    
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–µ—Ä–≤—ã–π –∏ –≤—Ç–æ—Ä–æ–π –º–∞—Å—Å–∏–≤—ã
      const actualCustomFieldsMapping = JSON.parse(JSON.stringify(updatedArr1));
      const actualCustomFields = JSON.parse(JSON.stringify(updatedArr2));
      return { actualCustomFieldsMapping, actualCustomFields };
    }

    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –±—ç–∫–∞–ø –∏ –∑–∞–ø–∏—Å–∏ –≤ —Å—Ç–∞—Ä—Ç–µ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å —Ä–µ–µ—Å—Ç—Ä–æ–º:
    const updatedArr1 = updateSyncStatus(arr1, arr2);
    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ –∏ —ç–ª–µ–º–µ–Ω—Ç—ã –°—Ç–∞—Ä—Ç–∞ –∏ –†–µ–µ—Å—Ç—Ä–∞, 
    // –µ—Å–ª–∏ –º–∞–ø–ø–∏–Ω–≥ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –†–µ–µ—Å—Ç—Ä–µ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –±—ç–∫–∞–ø–∞ –∞ —Å—Ç–∞—Ä—Ç–µ –Ω–µ—Ç(—ç—Ç–æ –º—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Ñ–ª–∞–≥–æ–º sync –æ—Å—Ç–∞–≤–∏–≤ –µ–≥–æ –≤ true –Ω–∞ –ø—Ä–æ—à–ª–æ–º —à–∞–≥–µ)
    const { actualCustomFieldsMapping, actualCustomFields } = syncAndUpdate(updatedArr1, arr2, arr3);
   
    return { actualCustomFieldsMapping, actualCustomFields };
    // –í—ã–∑—ã–≤–∞–µ–º
    //console.log(modifiedArr1);
    
 }
 /** –ü—Ä–æ–∏–∑–≤–æ–¥–∏–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–π –ª–æ–≥–∏–∫–µ: 
  * 1) –ï—Å–ª–∏ –ø–æ–ª–µ –º–µ–Ω—è–ª–æ—Å—å –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –≤ —Ä–µ–µ—Å—Ç—Ä–µ, –∞ –≤ —Å—Ç–∞—Ä—Ç–µ –µ—â–µ –Ω–µ –º–µ–Ω—è–ª–æ—Å—å —Ç–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞ –≤ —Å—Ç–∞—Ä—Ç –∏ –æ—Ç–∫–ª—é—á–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é 
  * 2) –ï—Å–ª–∏ –ø–æ–ª–µ —É–∂–µ –º–µ–Ω—è–ª–æ—Å—å –≤ —Å—Ç–∞—Ä—Ç–µ —Ç–æ –æ—Ç–∫–ª—é—á–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º, –æ—Å—Ç–∞–≤–ª—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ä—Ç–∞
  * –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ –∞–ø–∏ –≤ –°—Ç–∞—Ä—Ç
  */
const getUpdateData = async (startProjectFromByID, project, customInformationFromReestr, mappingProject, specificationsIdsFromStart, _ownersStr, _managersStr) => {   
    try {
      let updateProjectFlag = true; // —Ñ–ª–∞–≥ –æ—Ç–¥–∞–µ–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –∏–ª–∏ –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –º–∞–ø–ø–∏–Ω–≥
      let newMappingProject = JSON.parse(JSON.stringify(mappingProject)); // —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞–ø–ø–∏–Ω–≥      
       const data = startProjectFromByID?.data[0]; // –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞
       const data_2 = project // –ù–µ—Ö–≤–∞—Ç–∞—é—â–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
       //console.log(data_2)
       //console.log(specificationsIdsFromStart)
       // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Å—Ç–≤–∏–µ –≤—ã–ø–∞–¥–∞—é—â–∏—Ö –ø–æ–ª–µ–π specificationsIds –≤ –º–∞–ø–ø–∏–Ω–≥–µ –∏ –≤ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
       // –î–ª—è —ç—Ç–æ–≥–æ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –º–∞—Å—Å–∏–≤—ã 
       const backupIds  = mappingProject.specificationsIds
       const currentIds = data.specificationsIds
       // –ï—Å–ª–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ç—Ä–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –±—ã–ª–∏ –≤—ã—è–≤–ª–µ–Ω—ã –æ—Ç–ª–∏—á–∏—è specificationsIds —Ç–æ –æ—Ç–∫–ª—é—á–∞–µ–º —Ñ–ª–∞–≥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π –º–∞—Å—Å–∏–≤ –∏–¥–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –°—Ç–∞—Ä—Ç–∞ 
       // –µ—Å–ª–∏ —Ñ–ª–∞–≥ —É–∂–µ –±—ã–ª –æ—Ç–∫–ª—é—á–µ–Ω –ª–∏–±–æ —Ä–µ–µ—Å—Ç—Ä–∞ –µ—Å–ª–∏ —Ñ–ª–∞–≥ –±—ã–ª –≤–∫–ª—é—á–µ–Ω –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å—Ç–∞—Ä—Ç–µ –±—ã–ª–æ —Ç–∞–∫–æ–µ –∂–µ –∫–∞–∫ –≤ –±—ç–∫–∞–ø–µ –∞ –≤ —Ä–µ–µ—Å—Ç—Ä–µ –Ω–µ—Ç
       const { resultIdsArr, syncIdsFlag }  = compareIds(backupIds, currentIds, specificationsIdsFromStart)      
       if(syncIdsFlag != true) newMappingProject.specificationsIdsSync = false
       //console.log(resultIdsArr, syncIdsFlag)
       // –†–∞–±–æ—Ç–∞–µ–º —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏
       const backupCustomFields  = mappingProject.customInformation
       const currentCustomFields = data.customInformation.fields
       const reestrCustomFields = customInformationFromReestr.fields

      // const fileName = 'test_info'
      // const ___data = [backupCustomFields, currentCustomFields, reestrCustomFields]
      // const info =  await dbFile.writeFileJSON(fileName, ___data)

       const { actualCustomFieldsMapping, actualCustomFields } = compareCustomFields(backupCustomFields, currentCustomFields, reestrCustomFields)
       newMappingProject.customInformation = actualCustomFieldsMapping
      // const fileName2 = 'test_info2'
      // const ___data2 = [actualCustomFieldsMapping, actualCustomFields]
      // const info2 =  await dbFile.writeFileJSON(fileName2, ___data2)
      // –£–∑–Ω–∞–µ–º –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Ñ–∞–π–ª —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –∞–ø–∏ –¥–ª—è –∞–ø–¥–µ–π—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞
      if(JSON.stringify(mappingProject)!= JSON.stringify(newMappingProject)) {
       //  console.log('–º–∞–ø–ø–∏–Ω–≥–∏ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è')        
      } else {
        // console.log('–º–∞–ø–ø–∏–Ω–≥–∏ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã')
         updateProjectFlag = false;
      }

       const updateData = {
        name:               data.name,
        codeName:           data_2.codeName,
        rolesMapDate:       data_2.rolesMap,
        jiraLink:           data_2.jiraLink,
        comment:            data_2.comment,
        specificationsIds:  resultIdsArr,
        performerTypeId:    data.performerTypeId,
        customInformation:  {fields: actualCustomFields? actualCustomFields : []},
        templateId:         data.templateId,
       }
       return {updateData, newMappingProject, updateProjectFlag}
    } catch (error) {
       console.log(error)
       return {
          error: 'getUpdateData'
       }
    }
 }
 
 module.exports = {
    getImportData,
    getUpdateData,
    getSpecificationsIdsFromStart,
    getManagers,
    getOwners
 }